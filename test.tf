
########## Resource Example #############################
resource "local_file" "iac_code" {
  filename = var.filename
  content = "Setting up infrastructure as code"
}

variable "filename" {
  default = "~/test.txt"
  type = list(string)
}

resource "random_pet" "other-pet" {
  prefix = var.prefix.apple
  length = "1"
  separator = "."
}

variable "prefix" {
  default = ["apple", "banana"]
  type=list(string)
}


################## Variables Example ###########################
resource "local_file" "jedi" {
     filename = var.jedi["filename"]
     content = var.jedi["content"]
}

variable "jedi" {
  type = map(string)
  default = {
    "filename" = "test.txt"
    "content" = "DevOps World"
  }
}

variable "filename" {
  type = string
}


################# Attribute reference #####################
resource "time_static" "time_update" {
  
}
resource "local_file" "time" {
  filename = "/root/time.txt"
  content = "Time stamp of this file is ${time_static.time_update.id}"
}


################## implicit dependency ####################
resource "tls_private_key" "pvtkey" {
  algorithm = "RSA"
  rsa_bits = 4096
}

resource "local_file" "key_details" {
  filename = "/root/key.txt"
  content = tls_private_key.pvtkey.private_key_pem
}


################### explicit dependency ##########################
resource "local_file" "whale" {
  filename = "/root/whale"
  depends_on = [ local_file.krill ]
}

resource "local_file" "krill" {
  filename = "/root/krill"
}


################ output  #######################
resource "random_pet" "my-pet" {
  length = var.length
}

output "pet-name" {
  value = random_pet.my_pet.id 
  description = "Record the value of pet id which generated by random_pet resource"
}

variable "length" {
  default = 3
}


################ sample ####################
resource "local_file" "key_data" {
        filename       = "/tmp/.pki/private_key.pem"
        content = tls_private_key.private_key.private_key_pem
        file_permission =  "0400"
}
resource "tls_private_key" "private_key" {
  algorithm   = "RSA"
  dsa_bits  = 4096
}
resource "tls_cert_request" "csr" {
  key_algorithm   = "ECDSA"
  private_key_pem = file("/tmp/.pki/private_key.pem")
  depends_on = [ local_file.key_data ]

  subject {
    common_name  = "flexit.com"
    organization = "FlexIT Consulting Services"
  }
}



################### Life cycle rule #######################
resource "random_string" "string" {
  length = var.length
  keepers = {
    length = var.length
  }
 
 lifecycle {
   create_before_destroy = true
 }

 lifecycle {
   ignore_changes = [ all ]
 }

}
variable "length" {
  default = 10
}


################### data resource example ##############################
data "aws_s3_bucket" "test" {
  bucket = "test"
}


####################### count & For each ################################################################
### count #####  this will create the file name three times but at the end of action
### only one file exist
resource "local_file" "test" {
  filename = var.filename
  count = 3
}

variable "filename" {
  default = "~/test.txt"
}

#### below one will create three different files ###
resource "local_file" "test" {
  filename = var.filename[count.index]
  count = 3
}
variable "filename" {
  default = [
    "~/test1.txt",
    "~/test2.txt",
    "~/test3.txt"
  ]
}

#### If add more than three files that won't be created
### becoz count which we set is 3
### should automate this one to pick the no which we define in variable section
### To do that, can use inbuilt functin (length)
resource "local_file" "test" {
  filename = var.filename[count.index]
  count = length(var.filename)
}
variable "filename" {
  default = [
    "~/test1.txt",
    "~/test2.txt",
    "~/test3.txt"
  ]
}


##If I try to remove first file (test1.txt) the all the three going to remove and 
#recreate test2 & test3 files. We don't want to destroy all & recreate
#The reason resources are store in list 
## how to overcome this one (we can use for..each so that respective element only destroy)

###count ---> resources are store in list 
###for..each ---> resources are store in map

resource "local_file" "test" {
  filename = each.value
  for_each = var.filename
}
variable "filename" {
  default = [
    "~/test1.txt",
    "~/test2.txt",
    "~/test3.txt"
  ]
}

# when we use terraform apply getting error becoz count use list and for_each use map so can solve this two way
# first way (change the variable type)
resource "local_file" "test" {
  filename = each.value
  for_each = var.filename
}
variable "filename" {
  type = set(string)
  default = [
    "~/test1.txt",
    "~/test2.txt",
    "~/test3.txt"
  ]
}

# second way (convert the list to set in resource section)
resource "local_file" "test" {
  filename = each.value
  for_each = toset(var.filename)
}
variable "filename" {
  default = [
    "~/test1.txt",
    "~/test2.txt",
    "~/test3.txt"
  ]
}


#Error_case
#----------------
# main.tf 
resource "local_file" "name" {
    filename = each.value
    for_each = var.users
    sensitive_content = var.content
}


#variables.tf 
variable "users" {
    type = list(string)
    default = [ "/root/user10", "/root/user11", "/root/user12", "/root/user10"]
}
variable "content" {
    default = "password: S3cr3tP@ssw0rd"
}

#### terraform state list ###

############## Versioning constraints #########################
#value of the argument is object

terraform {
  required_providers {
    local = {
      source = "hashicorp/local"
      version = "1.4.0"
    }
  }
}
resource "local_file" "test" {
  filename = "test.txt"
}

# other options 
# version = "!= 1.4.0"
# version = "< 1.4.0, > 1.2.0, != 1.4.0"
# version = "~> 1.2.0" ---> pessimistic constraint operator ----> check the version incremental goes from 1.2.0 to 1.2.10 but not 1.3.0 


# https://registry.terraform.io/providers/hashicorp/local/latest
