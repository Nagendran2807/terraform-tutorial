
Three types of provider
------------------------
Hashicorp provider  ---> Official  ---> path: .terraform/plugins/
Third party provider ----> Verified 
Community provider ----> Community

Resource syntax:
-------------------
resource <provider>_<resource-type>  "<resource-name>" {
    required arguments 
}

Ex:
-----
resource local_file "test" {
    filename = "/root/test.txt"
}

local ---> provider 
file ----> resource type 
test ---> resource name 


Variables
-------------
string 
list
array 
set 
tuple 
map
object 


variable "name" {
    type = string 
    default = "Mark"
}

If not defined the variable type then default it would be consider as "any" type 

variable "name" {
    type = bool
    default = true 
}

map
--------
variable "jedi" {
     type = map
     default = {
     filename = "/root/first-jedi"
     content = "phanius"
     }
}

Fetch the key filename from variable jedi ---> var.jedi["filename"]

list
---------
variable "gender" {
    type = list(string)
    default = ["Male", "Female"]
}
Fetch Male value from gender variable ----> var.gender[0]

set
-----------
Same as list but can't assign duplicate elements for set variable

variable "users" {
    type = set(string)
    default = ["tom", "jerry", "pluto", "daffy", "donald", "jerry", "chip", "dale"]
}

tuple & List 
------
we can use different set of variable type in type section 
But in list we can't 



terraform show ---> Identify attribute values 

terraform output ----> Display all output values 

terraform init ----> Download the necessary plugins 

terraform plan ----> Generate the execution plan 
 
terraform show ---> inspect terraform state or plan 

Note on random resource 
----------------------------
All the resources for the random provider can be recreated by using a map type argument called keepers. 
A change in the value will force the resource to be recreated.


meta arguments  ----> change the behaviour of resource
----------------
depends_on 
lifecycle


terraform state commands
------------------------------
terraform state ---> complete record of infra which created by terraform
Maintain the exact real infra in local so that 
terraform know what kind of change have to do and check the change which you propose whether already present or not 

terraform state show local_file.file
terraform state list ---> list all resources

terraform state show <resourename> -----> List all attributes w.r.t that resource 

terraform state rm <resource-name> ----> remove the resource name in state file 
terraform state mv <resource-name> -----> 